% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orderedReg.R
\name{orderedReg}
\alias{orderedReg}
\title{Estimate Ordinal and Partial Proportional Odds Models with Transformed Thresholds}
\usage{
orderedReg(
  formula,
  partial_formula = NULL,
  data,
  family = "logit",
  weights = NULL,
  verbose = FALSE,
  method = "BFGS",
  delta = 1e-04
)
}
\arguments{
\item{formula}{A formula specifying the outcome and variables for the proportional odds model.}

\item{partial_formula}{A formula or list of formulas specifying variables for the non-proportional odds part of the model.
If a list is provided, each element corresponds to a specific outcome level (excluding the first level).}

\item{data}{A data frame containing the variables in the model.}

\item{family}{The family of the model, either "logit" or "probit". Default is "logit".}

\item{weights}{Name of the variable in the data containing sampling weights (optional).}

\item{verbose}{Logical indicating whether to print optimization details during fitting. Default is `FALSE`.}

\item{method}{The estimation method to use, from \link[maxLik]{maxLik}. Options include: "NR", "BFGS", "BFGS-R", "CG", "NM", and "SANN".}

\item{delta}{Step size for numerical derivatives. Default is 1e-4.}
}
\value{
A list containing model results, including parameter estimates, log-likelihood, gradient, Hessian, etc.
}
\description{
Estimate Ordinal and Partial Proportional Odds Models with Transformed Thresholds
}
\details{
This function estimates ordered and generalized ordered regression models with strictly increasing thresholds.
If partial formulas are provided, additional parameters for these non-proportional odds are estimated.
The gradient and Hessian are approximated numerically via finite differences, using the Rcpp functions.
}
\examples{
set.seed(123)
data <- data.frame(
  y = factor(sample(1:3, 100, replace = TRUE), ordered = TRUE),
  x1 = rnorm(100),
  x2 = rbinom(100, 1, 0.5),
  z1 = rnorm(100),
  z2 = rbinom(100, 1, 0.5)
)

# Proportional odds model
result1 <- orderedReg(
  formula = y ~ x1 + x2,
  data = data,
  family = "logit"
)
summary(result1)

# Partial proportional odds model with a single formula
result2 <- orderedReg(
  formula = y ~ x1,
  partial_formula = ~ z1 + z2,
  data = data,
  family = "logit"
)
summary(result2)

# Partial proportional odds model with a list of formulas
partial_formulas <- list(
  ~ z1,         # Variables for the second level
  ~ z1 + z2     # Variables for the third level
)
result3 <- orderedReg(
  formula = y ~ x1,
  partial_formula = partial_formulas,
  data = data,
  family = "logit"
)
summary(result3)

# Weighted model and using the verbose option
data$weights <- runif(100, 0.5, 2)
result4 <- orderedReg(
  formula = y ~ x1 + x2,
  data = data,
  family = "logit",
  weights = "weights",
  verbose=TRUE
)
summary(result4)


}
